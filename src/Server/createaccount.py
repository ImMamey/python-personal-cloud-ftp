# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'createaccount.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox
import sqlite3
import sys

from src.Server.adminpanel import Ui_MainWindow


class Ui_Form(object):
    def setupUi(self, Form) -> None:
        self.username = ""
        self.password = ""

        Form.setObjectName("Form")
        Form.resize(487, 366)
        Form.setFixedSize(487, 366)
        self.horizontalLayoutWidget = QtWidgets.QWidget(Form)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(80, 210, 321, 80))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButtonLogin = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButtonLogin.setObjectName("pushButtonLogin")
        self.horizontalLayout_3.addWidget(self.pushButtonLogin)
        self.pushButtonCreate = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButtonCreate.setObjectName("pushButtonCreate")
        self.horizontalLayout_3.addWidget(self.pushButtonCreate)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(100, 30, 281, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(130, 70, 251, 99))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.lineEditUsername = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEditUsername.setObjectName("lineEditUsername")
        self.verticalLayout_4.addWidget(self.lineEditUsername)
        self.lineEditPassword = QtWidgets.QLineEdit(self.verticalLayoutWidget)
        self.lineEditPassword.setObjectName("lineEditPassword")
        self.verticalLayout_4.addWidget(self.lineEditPassword)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(80, 90, 47, 13))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(80, 130, 47, 13))
        self.label_3.setObjectName("label_3")
        self.checkinputlabel = QtWidgets.QLabel(Form)
        self.checkinputlabel.setGeometry(QtCore.QRect(50, 180, 391, 20))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.checkinputlabel.setFont(font)
        self.checkinputlabel.setStyleSheet("color: rgb(255, 0, 0);")
        self.checkinputlabel.setText("")
        self.checkinputlabel.setObjectName("checkinputlabel")
        self.checkinputlabel.setAlignment(Qt.AlignCenter)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        # actions and events
        self.pushButtonCreate.clicked.connect(self.create_clicked)
        self.pushButtonLogin.clicked.connect(self.sql_admin_login)

    def retranslateUi(self, Form) -> None:
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Create Account"))
        self.pushButtonLogin.setText(_translate("Form", "Login"))
        self.pushButtonCreate.setText(_translate("Form", "Create Admin"))
        self.label.setText(_translate("Form", "Admin Login"))
        self.label_2.setText(_translate("Form", "Username:"))
        self.label_3.setText(_translate("Form", "Password:"))

    def lineEdite_validation(self)->bool:
        if self.lineEditPassword.text() == "" and self.lineEditUsername.text() == "":
            self.checkinputlabel.setText("Credentials cant be empty")
            self.lineEditUsername.setText("")
            self.lineEditPassword.setText("")
            return False

        elif self.lineEditPassword.text() == "":
            self.checkinputlabel.setText("Please enter a valid password")
            self.lineEditUsername.setText("")
            self.lineEditPassword.setText("")
            return False

        elif self.lineEditUsername.text() == "":
            self.checkinputlabel.setText("Please enter a valid username")
            self.lineEditUsername.setText("")
            self.lineEditPassword.setText("")
            return False
        elif self.lineEditPassword.text() != "" and self.lineEditUsername.text() != "":
            return True


    def create_clicked(self) -> None:

        if self.lineEdite_validation():
            username = self.lineEditUsername.text()
            password = self.lineEditPassword.text()

            msg = QMessageBox()
            msg.setWindowTitle("Attention, please save your credentials somewhere safe!")
            msg.setText(f"Please, save your credentials somewhere safe, and then click on OK\n\n"
                        f"Your current Username is: {username}\n"
                        f"Your current Password is: {password}\n\n"
                        f"If you want to use different credentials, please click on Retry")
            self.username = username
            self.password = password

            msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Retry)

            msg.buttonClicked.connect(self.ok_button_clicked)
            x = msg.exec_()

    def sql_admin_login(self)->None:
        """
        Logs in with an existing admin account if possible
        :return:None
        """
        # Saves current data from the Usernames
        if self.lineEdite_validation():
            self.username = self.lineEditUsername.text()
            self.password = self.lineEditPassword.text()
            db = None
            try:
                db = sqlite3.connect("users.db")
            except Exception as e:
                print(e)

            # SQL commands and cursors
            command_login = f'''SELECT username FROM admins where username = "{self.username}" and password = "{self.password}";'''
            cursor = db.cursor()

            # Check for admin match
            cursor.execute(command_login)
            if not cursor.fetchone():
                msg = QMessageBox()
                msg.setWindowTitle("Failiure!")
                msg.setText(f"Admin credentials are wrong, please try again")
                msg.setStandardButtons(QMessageBox.Retry)
                x = msg.exec_()
            else:
                print("Logged in!")
                self.openWindow()

            db.commit()
            db.close()




    def sql_create_admin(self) -> None:
        """
        Create a db connection, and creates and admin if possible
        :return: None
        """
        # connection with DB
        db = None
        try:
            db = sqlite3.connect("users.db")
        except Exception as e:
            print(e)

        # SQL commands and cursors
        command_check = f'''SELECT COUNT(*) FROM admins'''
        command_insert = f'''INSERT INTO admins(username,password) values("{self.username}" , "{self.password}")'''
        command_chkrepeatedadmin = f'''SELECT username FROM admins where username = "{self.username}";'''
        cursor = db.cursor()

        # CHECKS IF there are more than 2 ADMINS
        cursor.execute(command_check)
        value = cursor.fetchone()

        if value[0] == 2:
            msg = QMessageBox()
            msg.setWindowTitle("You cant create more admins")
            msg.setText(f"You only can have 2 admins accounts with this program.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

        elif value[0] < 2:
            cursor.execute(command_chkrepeatedadmin)
            if not cursor.fetchone():
                print("Repeated admin")
            else:
                print("Created 1 admin")
                cursor.execute(command_insert)
                #src.Server.ftpserver.start()
        db.commit()
        db.close()

    def ok_button_clicked(self, i):
        if i.text() == "OK":
            self.sql_create_admin()
        if i.text() == "Retry":
            self.username = ""
            self.password = ""

    def openWindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self.window)
        self.window.show()
        self.ui.refreshed_button_pressed()
        Form.close()



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
